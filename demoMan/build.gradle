plugins {
    id 'java'
    id 'war'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// dependencies설정 방법은 그냥 mvm Repository 에서 긁어서 붇혀오면 된다.

dependencies {
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")


    // 아래의 코드가
    // https://mvnrepository.com/artifact/org.springframework/spring-core
    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.16'

    // https://mvnrepository.com/artifact/org.springframework/spring-context
    implementation group: 'org.springframework', name: 'spring-context', version: '5.3.16'

    // https://mvnrepository.com/artifact/org.springframework/spring-test
    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.3.16'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // log4j는 어떤 상태로 출력 할건지 정해야함
    // 그래서 우리는 resources부분에 xml 파일을 넣어야 하는데
    // 생성 방법은 Resources bundle 을 생성후 xml base file 을 채크후
    // 해당 디

    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.16.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.16.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.16.0'

    implementation group: 'jstl', name: 'jstl', version: '1.2'
}

test {
    useJUnitPlatform()
}